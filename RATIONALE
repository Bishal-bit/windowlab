Rationale

Before I started WindowLab, I had been an ex-Amiga user who was reasonably new to Linux (~1998). To my mind, window managers (like text editors and file managers) are one of the most important parts of any system for the user, and I was not satisfied with those that already existed. At that time FVWM2 was the most commonly used Linux window manager but it was far too large for my tastes. Why have so many settings when I knew how things should be done? ;)

So I started work on my own window manager, basing it on aewm. The most important feature to my mind was to implement the Amigas non click-to-front behaviour, where a focussed window is not necessarily in front of other windows. Realising that it can be hard to get to a windows buttons if it is behind another window, I added a simplified Windows 95 style taskbar so that users could easily access each window.

Another neat feature of the Amigas GUI that had not been done before in an X window manager was the constraining of the pointer when the user tried to drag a window beyond the edge of the screen. In this way, WindowLab treats windows like they are Amiga screens in that a windows titlebar is constrained to the physical screen. At this point I started to think about the issue of launching executables from WindowLab. aewms approach was that taskbars and launching files was not part of the window managers job, and I respected the minimalist reasoning behind this, but since my constrained windows took it for granted that a taskbar existed at the top of the screen, I reasoned that the taskbar was best kept within the window manager. Realising that the taskbar was taking up as much space as an Amiga-style menu bar, I realised that I could reuse space just like the Amiga had done by making a menu bar available when the right mouse button is held down. My twist was that rather than have a proper drop down menu, my menu would consist of "bang" menu items a little like the "Quick Launch" toolbar in Windows 98, and by keeping the menu one level deep, I could reuse the constrained mouse pointer trick to take advantage of Fitts's law.

I have to admit that the Plan 9 style window resizing/reshaping originally came from laziness on my part. aewm has the user click a button on a windows titlebar to start a resize movement. I extended this and partly copied 9wm by allowing the user to select a starting top left position first. Amusingly I now realise that conventional draggable window borders are not that hard to implement, but I am happy enough with the current mechanism to leave it be. There is something nice and uniform about having a button for resizing along with the others.
